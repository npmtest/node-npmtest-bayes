{"/home/travis/build/npmtest/node-npmtest-bayes/test.js":"/* istanbul instrument in package npmtest_bayes */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bayes/lib.npmtest_bayes.js":"/* istanbul instrument in package npmtest_bayes */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_bayes = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_bayes = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-bayes/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-bayes && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_bayes */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_bayes\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_bayes.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_bayes.rollup.js'] =\n            local.assetsDict['/assets.npmtest_bayes.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_bayes.__dirname + '/lib.npmtest_bayes.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-bayes/node_modules/bayes/lib/naive_bayes.js":"/*\n    Expose our naive-bayes generator function\n */\nmodule.exports = function (options) {\n  return new Naivebayes(options)\n}\n\n// keys we use to serialize a classifier's state\nvar STATE_KEYS = module.exports.STATE_KEYS = [\n  'categories', 'docCount', 'totalDocuments', 'vocabulary', 'vocabularySize',\n  'wordCount', 'wordFrequencyCount', 'options'\n];\n\n/**\n * Initializes a NaiveBayes instance from a JSON state representation.\n * Use this with classifier.toJson().\n *\n * @param  {String} jsonStr   state representation obtained by classifier.toJson()\n * @return {NaiveBayes}       Classifier\n */\nmodule.exports.fromJson = function (jsonStr) {\n  var parsed;\n  try {\n    parsed = JSON.parse(jsonStr)\n  } catch (e) {\n    throw new Error('Naivebayes.fromJson expects a valid JSON string.')\n  }\n  // init a new classifier\n  var classifier = new Naivebayes(parsed.options)\n\n  // override the classifier's state\n  STATE_KEYS.forEach(function (k) {\n    if (!parsed[k]) {\n      throw new Error('Naivebayes.fromJson: JSON string is missing an expected property: `'+k+'`.')\n    }\n    classifier[k] = parsed[k]\n  })\n\n  return classifier\n}\n\n/**\n * Given an input string, tokenize it into an array of word tokens.\n * This is the default tokenization function used if user does not provide one in `options`.\n *\n * @param  {String} text\n * @return {Array}\n */\nvar defaultTokenizer = function (text) {\n  //remove punctuation from text - remove anything that isn't a word char or a space\n  var rgxPunctuation = /[^(a-zA-ZA-Яa-я0-9_)+\\s]/g\n\n  var sanitized = text.replace(rgxPunctuation, ' ')\n\n  return sanitized.split(/\\s+/)\n}\n\n/**\n * Naive-Bayes Classifier\n *\n * This is a naive-bayes classifier that uses Laplace Smoothing.\n *\n * Takes an (optional) options object containing:\n *   - `tokenizer`  => custom tokenization function\n *\n */\nfunction Naivebayes (options) {\n  // set options object\n  this.options = {}\n  if (typeof options !== 'undefined') {\n    if (!options || typeof options !== 'object' || Array.isArray(options)) {\n      throw TypeError('NaiveBayes got invalid `options`: `' + options + '`. Pass in an object.')\n    }\n    this.options = options\n  }\n\n  this.tokenizer = this.options.tokenizer || defaultTokenizer\n\n  //initialize our vocabulary and its size\n  this.vocabulary = {}\n  this.vocabularySize = 0\n\n  //number of documents we have learned from\n  this.totalDocuments = 0\n\n  //document frequency table for each of our categories\n  //=> for each category, how often were documents mapped to it\n  this.docCount = {}\n\n  //for each category, how many words total were mapped to it\n  this.wordCount = {}\n\n  //word frequency table for each category\n  //=> for each category, how frequent was a given word mapped to it\n  this.wordFrequencyCount = {}\n\n  //hashmap of our category names\n  this.categories = {}\n}\n\n/**\n * Initialize each of our data structure entries for this new category\n *\n * @param  {String} categoryName\n */\nNaivebayes.prototype.initializeCategory = function (categoryName) {\n  if (!this.categories[categoryName]) {\n    this.docCount[categoryName] = 0\n    this.wordCount[categoryName] = 0\n    this.wordFrequencyCount[categoryName] = {}\n    this.categories[categoryName] = true\n  }\n  return this\n}\n\n/**\n * train our naive-bayes classifier by telling it what `category`\n * the `text` corresponds to.\n *\n * @param  {String} text\n * @param  {String} class\n */\nNaivebayes.prototype.learn = function (text, category) {\n  var self = this\n\n  //initialize category data structures if we've never seen this category\n  self.initializeCategory(category)\n\n  //update our count of how many documents mapped to this category\n  self.docCount[category]++\n\n  //update the total number of documents we have learned from\n  self.totalDocuments++\n\n  //normalize the text into a word array\n  var tokens = self.tokenizer(text)\n\n  //get a frequency count for each token in the text\n  var frequencyTable = self.frequencyTable(tokens)\n\n  /*\n      Update our vocabulary and our word frequency count for this category\n   */\n\n  Object\n  .keys(frequencyTable)\n  .forEach(function (token) {\n    //add this word to our vocabulary if not already existing\n    if (!self.vocabulary[token]) {\n      self.vocabulary[token] = true\n      self.vocabularySize++\n    }\n\n    var frequencyInText = frequencyTable[token]\n\n    //update the frequency information for this word in this category\n    if (!self.wordFrequencyCount[category][token])\n      self.wordFrequencyCount[category][token] = frequencyInText\n    else\n      self.wordFrequencyCount[category][token] += frequencyInText\n\n    //update the count of all words we have seen mapped to this category\n    self.wordCount[category] += frequencyInText\n  })\n\n  return self\n}\n\n/**\n * Determine what category `text` belongs to.\n *\n * @param  {String} text\n * @return {String} category\n */\nNaivebayes.prototype.categorize = function (text) {\n  var self = this\n    , maxProbability = -Infinity\n    , chosenCategory = null\n\n  var tokens = self.tokenizer(text)\n  var frequencyTable = self.frequencyTable(tokens)\n\n  //iterate thru our categories to find the one with max probability for this text\n  Object\n  .keys(self.categories)\n  .forEach(function (category) {\n\n    //start by calculating the overall probability of this category\n    //=>  out of all documents we've ever looked at, how many were\n    //    mapped to this category\n    var categoryProbability = self.docCount[category] / self.totalDocuments\n\n    //take the log to avoid underflow\n    var logProbability = Math.log(categoryProbability)\n\n    //now determine P( w | c ) for each word `w` in the text\n    Object\n    .keys(frequencyTable)\n    .forEach(function (token) {\n      var frequencyInText = frequencyTable[token]\n      var tokenProbability = self.tokenProbability(token, category)\n\n      // console.log('token: %s category: `%s` tokenProbability: %d', token, category, tokenProbability)\n\n      //determine the log of the P( w | c ) for this word\n      logProbability += frequencyInText * Math.log(tokenProbability)\n    })\n\n    if (logProbability > maxProbability) {\n      maxProbability = logProbability\n      chosenCategory = category\n    }\n  })\n\n  return chosenCategory\n}\n\n/**\n * Calculate probability that a `token` belongs to a `category`\n *\n * @param  {String} token\n * @param  {String} category\n * @return {Number} probability\n */\nNaivebayes.prototype.tokenProbability = function (token, category) {\n  //how many times this word has occurred in documents mapped to this category\n  var wordFrequencyCount = this.wordFrequencyCount[category][token] || 0\n\n  //what is the count of all words that have ever been mapped to this category\n  var wordCount = this.wordCount[category]\n\n  //use laplace Add-1 Smoothing equation\n  return ( wordFrequencyCount + 1 ) / ( wordCount + this.vocabularySize )\n}\n\n/**\n * Build a frequency hashmap where\n * - the keys are the entries in `tokens`\n * - the values are the frequency of each entry in `tokens`\n *\n * @param  {Array} tokens  Normalized word array\n * @return {Object}\n */\nNaivebayes.prototype.frequencyTable = function (tokens) {\n  var frequencyTable = Object.create(null)\n\n  tokens.forEach(function (token) {\n    if (!frequencyTable[token])\n      frequencyTable[token] = 1\n    else\n      frequencyTable[token]++\n  })\n\n  return frequencyTable\n}\n\n/**\n * Dump the classifier's state as a JSON string.\n * @return {String} Representation of the classifier.\n */\nNaivebayes.prototype.toJson = function () {\n  var state = {}\n  var self = this\n  STATE_KEYS.forEach(function (k) {\n    state[k] = self[k]\n  })\n\n  var jsonStr = JSON.stringify(state)\n\n  return jsonStr\n}\n\n\n\n"}